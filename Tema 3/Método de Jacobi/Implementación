////////////Implementación//////////////////////////////////////

public class JacobiMethod {
    
    public static double[] jacobi(double[][] A, double[] b, double[] x0, double tolerance, int maxIterations) {
        int n = A.length;
        double[] x = new double[n];
        double[] xNext = new double[n];
        int iterations = 0;
        double error = Double.MAX_VALUE;
        
        // Inicializar el vector solución
        System.arraycopy(x0, 0, x, 0, n);
        
        while (error > tolerance && iterations < maxIterations) {
            // Calcular la siguiente aproximación
            for (int i = 0; i < n; i++) {
                double sum = 0;
                for (int j = 0; j < n; j++) {
                    if (j != i) {
                        sum += A[i][j] * x[j];
                    }
                }
                xNext[i] = (b[i] - sum) / A[i][i];
            }
            
            // Calcular el error
            error = calculateError(x, xNext);
            
            // Actualizar el vector solución
            System.arraycopy(xNext, 0, x, 0, n);
            
            iterations++;
        }
        
        return x;
    }
    
    private static double calculateError(double[] x, double[] xNext) {
        double maxError = 0;
        for (int i = 0; i < x.length; i++) {
            double error = Math.abs(xNext[i] - x[i]);
            if (error > maxError) {
                maxError = error;
            }
        }
        return maxError;
    }

    public static void main(String[] args) {
        // Ejemplo de uso
        double[][] A = {{4, -1, 0}, {-1, 4, -1}, {0, -1, 3}};
        double[] b = {10, 10, 10};
        double[] x0 = {0, 0, 0};
        double tolerance = 1e-6;
        int maxIterations = 1000;
        
        double[] solution = jacobi(A, b, x0, tolerance, maxIterations);
        
        System.out.println("Solución encontrada:");
        for (int i = 0; i < solution.length; i++) {
            System.out.println("x[" + i + "] = " + solution[i]);
        }
    }
}
